/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    dashcode.setupParts();
	document.getElementById('status').style.visibility = "hidden";
	document.getElementById('ribbon').style.visibility = "hidden";
	document.getElementById('tumblrPassword').type = 'password';
	readPrefs();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
	readPrefs();
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
	writePrefs();
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}

/* Here is our code */

// Handle a dropped file
function dragDrop(event)
{
    try {
        // Obtain the URIs of the dropped items
        var uriString = event.dataTransfer.getData("text/uri-list");

        // Split the URIs into an array
        uriList = uriString.split("\n");

        // Use uriList for your own purposes
    } catch(ex) {
        alert("Problem fetching URI: " + ex);
    }

    event.stopPropagation();
    event.preventDefault();
    if (checkForPhoto())
    {
        fadeToPhoto();
        sendPhotoPost();
    }
    else if(checkForText())
    {
        fadeToText();
		sendRegularPost();
    }
	else if(checkForMovie())
	{
		fadeToMovie();
		sendMoviePost();
	}
}

// Be sure to assign these handlers for the ondragenter
// and ondragover events on your drop target
// These handlers prevent Web Kit from processing
// drag events so you can handle the drop when it occurs
function dragEnter(event)
{
    event.stopPropagation();
    event.preventDefault();
}
function dragOver(event)
 {

    event.stopPropagation();
    event.preventDefault();
}


function checkForPhoto()
 {
    // get the filename extension
    var extension = uriList[0].substr(uriList[0].lastIndexOf('.') + 1);
    extension = extension.toLowerCase();

    // check for photos
    if (extension == "jpg" || extension == "png" || extension == "gif")
    {
        return true;
    }
    return false;
}

function checkForText()
 {
    // get the filename extension
    var extension = uriList[0].substr(uriList[0].lastIndexOf('.') + 1);
    extension = extension.toLowerCase();

    // check for photos
    if (extension == "txt" || extension == "tmb")
    {
        return true;
    }
    return false;
}

function checkForMovie()
 {
    // get the filename extension
    var extension = uriList[0].substr(uriList[0].lastIndexOf('.') + 1);
    extension = extension.toLowerCase();

    // check for photos
    if (extension == "mov" || extension == "m4v" || extension == "avi")
    {
        return true;
    }
    return false;
}

function getFilename()
{
	var fileNameWExtension = uriList[0].substr(uriList[0].lastIndexOf('/') + 1);
	var fName = fileNameWExtension.split('.');
	return decodeURI(fName[0]);
}

function fadeToPhoto()
 {
    // Values you provide
    var itemToFadeOut = document.getElementById("imageArea");
    // replace with name of element to fade
    // Fading code
    var fadeHandler = function(a, c, s, f) {
        itemToFadeOut.style.opacity = c;
    };
    new AppleAnimator(200, 13, 1.0, 0.0, fadeHandler).start();
    
    document.getElementById("imageArea").getElementsByTagName('img')[0].src = "Images/pictureImg.png";

    // Values you provide
    var itemToFadeIn = document.getElementById("imageArea");
    // replace with name of element to fade
    // Fading code
    var fadeHandler = function(a, c, s, f) {
        itemToFadeIn.style.opacity = c;
    };
    new AppleAnimator(500, 13, 0.0, 1.0, fadeHandler).start();
}

function fadeToText()
 {
    // Values you provide
    var itemToFadeOut = document.getElementById("imageArea");
    // replace with name of element to fade
    // Fading code
    var fadeHandler = function(a, c, s, f) {
        itemToFadeOut.style.opacity = c;
    };
    new AppleAnimator(200, 13, 1.0, 0.0, fadeHandler).start();
    
    document.getElementById("imageArea").getElementsByTagName('img')[0].src = "Images/fileImg.png";

    // Values you provide
    var itemToFadeIn = document.getElementById("imageArea");
    // replace with name of element to fade
    // Fading code
    var fadeHandler = function(a, c, s, f) {
        itemToFadeIn.style.opacity = c;
    };
    new AppleAnimator(500, 13, 0.0, 1.0, fadeHandler).start();
}

function fadeToDefault()
 {
    // Values you provide
    var itemToFadeOut = document.getElementById("imageArea");
    // replace with name of element to fade
    // Fading code
    var fadeHandler = function(a, c, s, f) {
        itemToFadeOut.style.opacity = c;
    };
    new AppleAnimator(200, 13, 1.0, 0.0, fadeHandler).start();
    
    document.getElementById("imageArea").getElementsByTagName('img')[0].src = "Images/tumblrDefault.png";

    // Values you provide
    var itemToFadeIn = document.getElementById("imageArea");
    // replace with name of element to fade
    // Fading code
    var fadeHandler = function(a, c, s, f) {
        itemToFadeIn.style.opacity = c;
    };
    new AppleAnimator(300, 13, 0.0, 1.0, fadeHandler).start();
}


function sendPhotoPost()
 {
    var data = decodeURI(uriList[0].replace("file://localhost", ""));
    var password = document.getElementById('tumblrPassword').value;
    var email = document.getElementById('tumblrEmail').value;
    var generator = "tumblr widget 3.0";
    var type = "photo";
    var caption = getFilename();

    var requestString = '-F email=' + email + ' -F "password=' + password + '" -F type=' + type + ' -F "data=@' + data + '" -F "caption=' + caption + '" -F "generator=' + generator + '"';

    command = '/usr/bin/curl -H "Content-Type: multipart/form-data; charset=utf-8" ' + requestString + ' http://www.tumblr.com/api/write';
    // indicate that you're working here
	document.getElementById('status').innerText = "SENDING";
	setTimeout("showStatus(300)", 0);
    cmdout = widget.system(command, uploadHandler);
}

function uploadHandler(obj)
{
	if(cmdout.outputString != "Authentication failed.")
	{
		document.getElementById('status').innerText = "DONE!";
		setTimeout("hideStatus()", 2000);
		setTimeout("fadeToDefault()", 0);
	}
	else
	{
		document.getElementById('status').innerText = "AUTH FAIL";
		setTimeout("fadeToDefault()", 0);
		//showBack();
		setTimeout("hideStatus()", 2000);
	}
}

function sendRegularPost()
 {
    var subject = getFilename();
    var password = document.getElementById('tumblrPassword').value;
    var email = document.getElementById('tumblrEmail').value;
    var generator = "tumblr widget 3.0";
    var type = "regular";
    var catCommand = "/bin/cat "+decodeURI(uriList[0].replace("file://localhost", ""));
	var catOutput = widget.system(catCommand, null); // ugly!!!
	var body = catOutput.outputString;
	var requestString = 'email=' + email + '&password=' + password + '&type=' + type + '&title=' + subject + '&body=' + body + '&generator=' + generator;

    // indicate progress here
	document.getElementById('status').innerText = "SENDING";
	setTimeout("showStatus(300)", 0);

    xmlhttp = new XMLHttpRequest();

    xmlhttp.open("POST",
    "http://www.tumblr.com/api/write",
    true);
    xmlhttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded", "charset=utf-8");

    xmlhttp.send(encodeURI(requestString));

    xmlhttp.onreadystatechange = function() {
        if (xmlhttp.status == 400) {
            // oops somebody fucked up
			document.getElementById('status').innerText = "ERROR 400";
			setTimer("hideStatus()", 2000);
        }
        else if (xmlhttp.status == 403) {
            // wrong pass, flip the bitch over
			showBack();
        }
        else {
			// good job, clean up
			document.getElementById('status').innerText = "DONE!";
            setTimeout("fadeToDefault()", 0);
			setTimer("hideStatus()", 2000);
        }
    }
}

function catMaster()
{
	// LOLOLOL
	alert("I am a master of CATS");
}


function writePrefs()
 {
    // Values you provide
    var preferenceKey = "user";
    // replace with the key for a preference
    var preferenceValue = document.getElementById('tumblrEmail').value;
    // replace with a preference to save
    // Preference code
    widget.setPreferenceForKey(preferenceValue, widget.identifier + "-" + preferenceKey);

    preferenceKey = "pass";
    preferenceValue = document.getElementById('tumblrPassword').value;

    widget.setPreferenceForKey(preferenceValue, widget.identifier + "-" + preferenceKey);
}

function readPrefs()
 {
    // Values you provide
    var preferenceForKey = "user";
    // replace with the key for a preference
    // Preference code
    preferenceForKey = widget.preferenceForKey(widget.identifier + "-" + preferenceForKey);
    if (preferenceForKey != null)
    {
        document.getElementById('tumblrEmail').value = preferenceForKey;
    }

    preferenceForKey = "pass";
    preferenceForKey = widget.preferenceForKey(widget.identifier + "-" + preferenceForKey);
    if (preferenceForKey != null)
    {
        document.getElementById('tumblrPassword').value = preferenceForKey;
    }

}


function clearEmail()
 {
    if (document.getElementById('tumblrEmail').value == "your@email")
    {
        document.getElementById('tumblrEmail').value = "";
    }
}

function clearPassword()
 {
    if (document.getElementById('tumblrPassword').value == "secret")
    {
        document.getElementById('tumblrPassword').value = "";
    }
}

function goToSite(event)
{
    widget.openURL("http://macwidget.tumblr.com");
}

function showStatus(fadePeriod)
{

	document.getElementById("ribbon").style.visibility = "visible";
	
	// Values you provide
var itemToFadeIn = document.getElementById("ribbon");	// replace with name of element to fade

// Fading code
var fadeHandler = function(a, c, s, f){ itemToFadeIn.style.opacity = c; };
new AppleAnimator(fadePeriod, 13, 0.0, 1.0, fadeHandler).start();

	document.getElementById('status').style.visibility = "visible";

	// Values you provide
var itemToFadeIn = document.getElementById("status");	// replace with name of element to fade

// Fading code
var fadeHandler = function(a, c, s, f){ itemToFadeIn.style.opacity = c; };
new AppleAnimator(fadePeriod, 13, 0.0, 1.0, fadeHandler).start();

}

function hideStatus()
{
// Values you provide
var itemToFadeOut = document.getElementById("status");	// replace with name of element to fade

// Fading code
var fadeHandler = function(a, c, s, f){ itemToFadeOut.style.opacity = c; };
new AppleAnimator(500, 13, 1.0, 0.0, fadeHandler).start();

	document.getElementById('status').innerText = "";
	document.getElementById('status').style.visibility = "hidden";

// Values you provide
var itemToFadeOut = document.getElementById("ribbon");	// replace with name of element to fade

// Fading code
var fadeHandler = function(a, c, s, f){ itemToFadeOut.style.opacity = c; };
new AppleAnimator(200, 13, 1.0, 0.0, fadeHandler).start();

	document.getElementById('ribbon').style.visibility = "hidden";


}
